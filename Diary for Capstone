계획 : 국민대학교 구성원들을 위한 택시 카풀 서비스 어플리케이션 (가칭 : K-Arpool)

팀장1 : 황정훈(20152954)
팀원2 : 이태우()
팀원3 : 푸렙키시그()

1. Native vs Cross-Platform

1-1. Native : Android의 경우 Kotlin(Java)를 이용해 Android Studio로 제작 && iOS의 경우 Swift(Objective-C)를 이용해 XCode로 제작

1-2. Cross-Platform : Flutter나 React Native를 이용해 동시 제작
1-2-1. Flutter : Dart라는 언어를 사용하며 팀원 중 XCode를 사용할 수 있는 애플 기기가 없으면 제작 불가(초기 설정 어려움) (→ 1-1의 Android용으로만 제작 가능)
1-2-2. React Native : Javascript를 사용하며 Expo라는 플랫폼을 사용하면 Xcode가 없더라도 제작 가능 (단, 라이브러리 제한 있음, Expo 미사용시 Flutter랑 유사함)

Native와 Cross-Platform의 장단점은 이미 잘 알고 있으니 성능 vs 제작속도 중 더 중요한 부분이 무엇인지 판단하고 결정


2. Server and Client
2-1. Server : 졸업프로젝트용으로 만드는 어플리케이션이긴 하지만, 국민대학교 구성원들이 쓴다고 가정해야 하므로 (이하 페르미 추정에 의해 계산)
			  재학생+교직원 총원을 2만명으로 가정하고, 이 중 대중교통으로 등하교/출퇴근을 하는 사람의 비율을 80%로 가정
			  모든 재학생이 주 4회 등하교를 갖는다고 가정하면 1.6만*4/5 = 1.2만명이 어플 사용 가능
			  퇴근 시간대에는 택시를 거의 이용하지 않는다고 가정하고, 9시 등교 시간대에 대부분 몰린다고 가정하면,
			  9시 등교 인원 && (셔틀)버스를 놓쳐 지각할 위험이 있는 인원 1.2만명*10% = 1200명
			  + 그 이외 시간대에서 지각할 가능성이 있는 인원,
			    제3의 지역으로 출발/도착하는 인원 (ex. 집이 비슷한 수강생들끼리 야외(집중)수업을 받으러 갈 때)
			  
			  = 하루 실제 이용자 수를 1000~1500명으로 추정하고 이에 맞춰 서버를 구축
			  실제 개인정보를 수집하는 것은 불가능에 가까우므로, 팀원 3명을 제외한 나머지 개인정보는 가상으로 생성
			  
			  그 외 서버 이용 계획은 추후 논의
			  
2-2. Client : 모든 개인정보는 Client에서 Server로 (실제로 1000개를 일일이 다 넣을 수 없으므로 시범적으로 5개만 넣고 나머지는 바로 서버로)


3. 사용규정 및 해설

제1조(목적) K-Arpool은 국민대학교 구성원들이 해당 어플리케이션을 통해 택시비를 절감하여 교통비 부담을 줄이는 것을 목적으로 한다.

3-1. 국민대학교 구성원만 가입하게 하는 법 : kookmin.ac.kr 이메일로만 회원가입을 받아야 함
(실제로는 사용 가능한 계정이 3개 밖에 없으므로 실제 가입은 3개만 하고, naver.com이나 gmail.com은 가입이 안되게끔 조치. 나머지는 가상으로 생성)

3-2. 매칭 시스템 : 4인 1조를 원칙으로 하며, 누구나 개설 가능. (4인을 이하 '팀장' 1인과 '팀원' 1~3인으로 구성)
                   팀장이 택시비를 모두 납부하는 것이 default (팀장 변경 가능)
				   더치페이 완료시 팀장이 해당 팀원에 대해 완납버튼을 누르면 됨.


3-3. 더치페이 : 팀장이 택시비를 모두 납부하는 것이 default (팀장 변경 가능)
			    본인부담금 지불시 팀장이 해당 팀원에 대해 완납버튼을 누르면 됨.
                더치페이를 강제하려면 금융정보를 받아와야 하는 상황이 생기므로 개인의 양심에 맡기도록 함.
                다만, 택시비를 지불한 사람이 개인적으로 블랙리스트 신고가 가능하며 누적시 이용정지 가능 / 제재에 대한 이의신청도 가능.
